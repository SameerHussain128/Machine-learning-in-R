# Load necessary libraries
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(summarytools)
library(caret)
# Step 1: Loading the Data
data <- read.csv("D:/Data Science 6pm/ML in R/Salary prediction project in R/Data.csv")
# Step 2: Exploring and Understanding the Data
# Display the structure of the dataset
str(data)
# Display summary statistics
summary(data)
# Display the first few rows of the dataset
head(data)
# Display more detailed summary statistics
print(dfSummary(data), method = 'render')
# Step 3: Data Cleaning
# Check for missing values
missing_values <- sapply(data, function(x) sum(is.na(x)))
data <- data %>%
mutate(across(where(is.numeric), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
print(data)
data = factor(data,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
# Check the encoded data
print(data)
data$Country = factor(data$Country ,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
data$Country = factor(data$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
# Define a mapping for countries to numeric codes
data = factor(data$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
data = factor(data,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
# Check the encoded data
print(data)
data = factor(data,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
data = factor(data,
levels = c('No','Yes'),
labels = c(0,1))
# Check the encoded data
print(data)
# Split data into 70% training and 30% testing
train_index <- createDataPartition(data$country, p = 0.7, list = FALSE)
library(tidyverse)
library(DMwR)
# Load the dataset
data <- read.csv('D:/Data Science 6pm/ML in R/Data.csv')
# Initial exploration
head(data)
summary(data)
str(data)
colnames(data)  # View column names to identify the target variable
# Data Preprocessing
colSums(is.na(data))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Step 1: Loading the Data
data <- read.csv("D:/Data Science 6pm/ML in R/Salary prediction project in R/Data.csv")
View(data)
View(data)
dataset$Age = iselse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE))
dataset$Age)
data$Age <- ifelse(is.na(data$Age),
ave(data$Age, FUN = function(x) mean(x, na.rm = TRUE)),
data$Age)
View(data)
View(data)
data$Age <- ifelse(is.na(data$Salary),
ave(data$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
data$Salary)
View(data)
View(data)
data$Age <- ifelse(is.na(data$Age),
ave(data$Age, FUN = function(x) mean(x, na.rm = TRUE)),
data$Age)
data$Age <- ifelse(is.na(data$Salary),
ave(data$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
data$Salary)
View(data)
View(data)
data$Salary <- ifelse(is.na(data$Salary),
ave(data$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
data$Salary)
# encode cat values
data$Country = factor(data$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
data$Purchased = factor(data$Purchased,
levels = c('No','Yes'),
labels = c(0,1))
library(caTools)
install.packages(caTools)
install.packages('caTools')
# Set seed for reproducibility
set.seed(123)
split <- sample.split(data$Purchased, SplitRatio = 0.8)
split = sample.split(data$Purchased, SplitRatio = 0.8)
library(caTools)
# Set seed for reproducibility
set.seed(123)
# Split the dataset
split = sample.split(data$Purchased, SplitRatio = 0.8)
training_set = subset(data, split == TRUE)
testing_set = subset(data, split == FALSE)
View(testing_set)
View(testing_set)
View(training_set)
View(training_set)
training_set[,2:3] = scale(training_set[,2:3])
testing_set[,2:3] = scale(testing_set[,2:3])
View(testing_set)
View(testing_set)
# Step 6: Fit the linear regression model
# Include the target variable in the formula
regressor <- lm(Salary ~ ., data = training_set)
# Step 7: Make predictions on the testing set
y_pred <- predict(regressor, newdata = x_test)
# Step 7: Make predictions on the testing set
y_pred <- predict(regressor, newdata = testing_set)
y_pred
testing_set = subset(data, split == FALSE)
# Step 8: Evaluate the model's performance
# Print the summary of the model
summary(regressor)
# Calculate and print the Mean Squared Error (MSE)
mse <- mean((y_test - y_pred)^2)
print(paste("Mean Squared Error:", mse))
# Calculate and print the Mean Squared Error (MSE)
mse <- mean((testing_set - y_pred)^2)
print(paste("Mean Squared Error:", mse))
View(regressor)
View(regressor)
# Step 7: Make predictions on the testing set
y_pred <- predict(regressor, newdata = testing_set)
# Step 7: Evaluate the model's performance
# Print the summary of the model
summary(regressor)
